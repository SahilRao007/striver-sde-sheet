class Solution {
    long long merge(int arr[],int l,int mid, int r){
        int total = 0;
  int J = mid + 1;
  for (int i = l; i <= mid; i++) {
    while ( J<= r && arr[i] > 2LL * arr[J]) {
      J++;
    }
    total += (J - (mid + 1));
  }
        
long long inv = 0;
int n1 = mid-l+1;
int n2 = r - mid;
int a[n1];
int b[n2];
for(int i = 0;i<n1;i++){
a[i] = arr[l+i];
}
for(int i = 0;i<n2;i++){
b[i] = arr[mid+i+1];
}
int i = 0,j = 0, k = l;
while(i<n1 and j<n2){
if(a[i] <= b[j]){
arr[k] = a[i];
k++;i++;
}
else{
arr[k] = b[j];
if(arr[i]<(2*arr[j]))
inv++;
k++;j++;
}
}
while(i<n1){
arr[k] = a[i];
k++;i++;
}
while(j<n2){
arr[k] = b[j];
k++;j++;
}
return total;
}

long long mergeSort(int arr[],int l,int r){
long long inv = 0;
if(l < r){
int mid = (l+r)/2;
inv += mergeSort(arr,l,mid);
inv += mergeSort(arr,mid+1,r);
inv += merge(arr,l,mid,r);
}
return inv;
}
public:
    int reversePairs(vector<int>& nums) {
        int arr[nums.size()];
        for(int i=0;i<nums.size();i++)
            arr[i]=nums[i];
            int l=0;
        int r=nums.size()-1;
        int ct=0;
        ct=mergeSort(arr,l,r);
        return ct;
    }
};

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode* temp=head;
        map<ListNode* , bool> visited;
        while(temp!=NULL)
        {
            if(visited[temp]== true)
            return true;
            else
                visited[temp]=true;
            temp=temp->next;
        }
        return false;
    }
};

//2nd method fast and slow method 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head==NULL)
        return false;
        ListNode* slow=head;
        ListNode* fast=head->next;
        
        while(slow!=NULL and fast!= NULL)
        {
            fast=fast->next;
            if(fast!=NULL)
                fast=fast->next;
            slow=slow->next;
            if(slow==fast)
            {
                return true;
            }
        }
        return false;
            
        
    }
};

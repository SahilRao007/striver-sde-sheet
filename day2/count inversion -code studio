#include <bits/stdc++.h> 
long long merge(long long *arr,int l,int m,int r)
{
    long long inv=0;
    int n1 = m-l+1;
    int n2 = r - m;
    int a[n1];
    int b[n2];
    for(int i = 0;i<n1;i++)
    {
        a[i] = arr[l+i];
    }
    for(int i=0;i<n2;i++)
    {
        b[i]=arr[m+1+i];
    }
    int i=0,j=0,k=l;
    while(i<n1 and j<n2)
    {
        if(a[i] <= b[j]){
        arr[k] = a[i];
        k++;i++;
        }
        else{
            arr[k] = b[j];
            inv += n1 - i;
            k++;j++;
            }
    }
while(i<n1){
    arr[k] = a[i];
    k++;i++;
}
while(j<n2){
    arr[k] = b[j];
    k++;j++;
}
return inv;
}

long long mergesort(long long *arr,int l,int r)
{    long long inv=0;
    if(l<r)
    {
        int mid=(l+r)/2;
        inv+=mergesort(arr,l,mid);
        inv+=mergesort(arr,mid+1,r);
        inv+=merge(arr,l,mid,r);
    }
 return inv;
}

long long getInversions(long long *arr, int n){
    int l=0;
    int r=n-1;
    long long ans=mergesort(arr,l,r);
    return ans;
}

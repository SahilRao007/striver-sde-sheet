o(n) but not time optimized 
class Solution {
    int findlength(map<int,bool>mpp,int key)
    {
        int ans=0;
        while(mpp.find(key) != mpp.end())
        {
            ans++;
            key++;
        }
        return ans;
    }
public:
    int longestConsecutive(vector<int>& nums) {
        int n=nums.size();
        if(n==0)
            return 0;
        int ct=1;
        int mct=INT_MIN;
        map<int,bool>mpp;
        for(int i=0;i<n;i++)
            mpp[nums[i]]=true;
        
        for(int i=0;i<n;i++)
        {
            if(mpp.find(nums[i]-1) != mpp.end())
            {
                mpp[nums[i]]=false;
            }
        }
        for( auto it=mpp.begin();it!=mpp.end();it++)
        {
            if(it->second == true)
            {
                mct=max(mct,findlength(mpp,it->first));
            }
        }
        return mct;
    }
};
